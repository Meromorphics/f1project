// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace model3_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 33> locations_array__ =
  {" (found before start of program)",
  " (in 'model3.stan', line 32, column 4 to column 26)",
  " (in 'model3.stan', line 60, column 4 to column 15)",
  " (in 'model3.stan', line 61, column 4 to column 28)",
  " (in 'model3.stan', line 64, column 14 to column 15)",
  " (in 'model3.stan', line 64, column 8 to column 81)",
  " (in 'model3.stan', line 65, column 15 to column 16)",
  " (in 'model3.stan', line 65, column 8 to column 49)",
  " (in 'model3.stan', line 67, column 8 to column 46)",
  " (in 'model3.stan', line 63, column 4 to line 68, column 3)",
  " (in 'model3.stan', line 62, column 4 to line 68, column 3)",
  " (in 'model3.stan', line 40, column 4 to column 29)",
  " (in 'model3.stan', line 43, column 4 to column 15)",
  " (in 'model3.stan', line 47, column 14 to column 15)",
  " (in 'model3.stan', line 47, column 8 to column 81)",
  " (in 'model3.stan', line 49, column 15 to column 16)",
  " (in 'model3.stan', line 49, column 8 to column 49)",
  " (in 'model3.stan', line 52, column 8 to column 43)",
  " (in 'model3.stan', line 45, column 4 to line 53, column 5)",
  " (in 'model3.stan', line 44, column 4 to line 53, column 5)",
  " (in 'model3.stan', line 19, column 4 to column 27)",
  " (in 'model3.stan', line 20, column 4 to column 25)",
  " (in 'model3.stan', line 27, column 10 to column 22)",
  " (in 'model3.stan', line 27, column 4 to column 71)",
  " (in 'model3.stan', line 32, column 11 to column 20)",
  " (in 'model3.stan', line 61, column 11 to column 18)",
  " (in 'model3.stan', line 7, column 8 to column 19)",
  " (in 'model3.stan', line 8, column 8 to column 31)",
  " (in 'model3.stan', line 11, column 12 to column 71)",
  " (in 'model3.stan', line 10, column 8 to line 12, column 9)",
  " (in 'model3.stan', line 9, column 8 to line 12, column 9)",
  " (in 'model3.stan', line 13, column 8 to column 29)",
  " (in 'model3.stan', line 6, column 4 to line 14, column 5)"};
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>>
get_ln_likelihood(const T0__& t_arg__, std::ostream* pstream__);
// real get_ln_likelihood(vector)
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
get_ln_likelihood(const T0__& t_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t = stan::math::to_ref(t_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 26;
    n = 20;
    local_scalar_t__ ln_likelihood = DUMMY_VAR__;
    current_statement__ = 27;
    ln_likelihood = 0;
    current_statement__ = 30;
    for (int i = 1; i <= (n - 1); ++i) {
      current_statement__ = 28;
      ln_likelihood = ((ln_likelihood +
        stan::model::rvalue(t, "t", stan::model::index_uni(i))) -
        stan::math::log_sum_exp(
          stan::model::rvalue(t, "t", stan::model::index_min_max(i, n))));
    }
    current_statement__ = 31;
    return ln_likelihood;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class model3_model final : public model_base_crtp<model3_model> {
 private:
  int n_drivers;
  int n_races;
  std::vector<int> driver_orderings;
 public:
  ~model3_model() {}
  model3_model(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model3_model_namespace::model3_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 20;
      context__.validate_dims("data initialization", "n_drivers", "int",
        std::vector<size_t>{});
      n_drivers = std::numeric_limits<int>::min();
      current_statement__ = 20;
      n_drivers = context__.vals_i("n_drivers")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "n_drivers", n_drivers,
        0);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "n_races", "int",
        std::vector<size_t>{});
      n_races = std::numeric_limits<int>::min();
      current_statement__ = 21;
      n_races = context__.vals_i("n_races")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "n_races", n_races, 0);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("driver_orderings",
        "20 * n_races", (20 * n_races));
      current_statement__ = 23;
      context__.validate_dims("data initialization", "driver_orderings",
        "int", std::vector<size_t>{static_cast<size_t>((20 * n_races))});
      driver_orderings = std::vector<int>((20 * n_races),
                           std::numeric_limits<int>::min());
      current_statement__ = 23;
      driver_orderings = context__.vals_i("driver_orderings");
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "driver_orderings",
        driver_orderings, 1);
      current_statement__ = 23;
      stan::math::check_less_or_equal(function__, "driver_orderings",
        driver_orderings, n_drivers);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("t_d", "n_drivers", n_drivers);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("log_lik", "n_races", n_races);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_drivers;
  }
  inline std::string model_name() const final {
    return "model3_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=model3.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> t_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_drivers,
          DUMMY_VAR__);
      current_statement__ = 1;
      t_d = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(n_drivers);
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(t_d, 3, 0, 1));
        int n = std::numeric_limits<int>::min();
        current_statement__ = 12;
        n = 20;
        current_statement__ = 19;
        for (int i = 1; i <= n_races; ++i) {
          current_statement__ = 13;
          stan::math::validate_non_negative_index("driver_ordering_i", "n", n);
          std::vector<int> driver_ordering_i =
            std::vector<int>(n, std::numeric_limits<int>::min());
          current_statement__ = 14;
          stan::model::assign(driver_ordering_i,
            stan::math::segment(driver_orderings, (1 + ((i - 1) * n)), n),
            "assigning variable driver_ordering_i");
          current_statement__ = 15;
          stan::math::validate_non_negative_index("t_d_i", "n", n);
          Eigen::Matrix<local_scalar_t__,-1,1> t_d_i =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
          current_statement__ = 16;
          stan::model::assign(t_d_i,
            stan::model::rvalue(t_d, "t_d",
              stan::model::index_multi(driver_ordering_i)),
            "assigning variable t_d_i");
          current_statement__ = 17;
          lp_accum__.add(get_ln_likelihood(t_d_i, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> t_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_drivers,
          DUMMY_VAR__);
      current_statement__ = 1;
      t_d = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(n_drivers);
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(t_d, 3, 0, 1));
        int n = std::numeric_limits<int>::min();
        current_statement__ = 12;
        n = 20;
        current_statement__ = 19;
        for (int i = 1; i <= n_races; ++i) {
          current_statement__ = 13;
          stan::math::validate_non_negative_index("driver_ordering_i", "n", n);
          std::vector<int> driver_ordering_i =
            std::vector<int>(n, std::numeric_limits<int>::min());
          current_statement__ = 14;
          stan::model::assign(driver_ordering_i,
            stan::math::segment(driver_orderings, (1 + ((i - 1) * n)), n),
            "assigning variable driver_ordering_i");
          current_statement__ = 15;
          stan::math::validate_non_negative_index("t_d_i", "n", n);
          Eigen::Matrix<local_scalar_t__,-1,1> t_d_i =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
          current_statement__ = 16;
          stan::model::assign(t_d_i,
            stan::model::rvalue(t_d, "t_d",
              stan::model::index_multi(driver_ordering_i)),
            "assigning variable t_d_i");
          current_statement__ = 17;
          lp_accum__.add(get_ln_likelihood(t_d_i, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model3_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> t_d =
        Eigen::Matrix<double,-1,1>::Constant(n_drivers,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      t_d = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(n_drivers);
      out__.write(t_d);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int n = std::numeric_limits<int>::min();
      current_statement__ = 2;
      n = 20;
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_races,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      for (int i = 1; i <= n_races; ++i) {
        current_statement__ = 4;
        stan::math::validate_non_negative_index("driver_ordering_i", "n", n);
        std::vector<int> driver_ordering_i =
          std::vector<int>(n, std::numeric_limits<int>::min());
        current_statement__ = 5;
        stan::model::assign(driver_ordering_i,
          stan::math::segment(driver_orderings, (1 + ((i - 1) * n)), n),
          "assigning variable driver_ordering_i");
        current_statement__ = 6;
        stan::math::validate_non_negative_index("t_d_i", "n", n);
        Eigen::Matrix<double,-1,1> t_d_i =
          Eigen::Matrix<double,-1,1>::Constant(n,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 7;
        stan::model::assign(t_d_i,
          stan::model::rvalue(t_d, "t_d",
            stan::model::index_multi(driver_ordering_i)),
          "assigning variable t_d_i");
        current_statement__ = 8;
        stan::model::assign(log_lik, get_ln_likelihood(t_d_i, pstream__),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(n);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> t_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_drivers,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(t_d,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_drivers),
        "assigning variable t_d");
      out__.write(t_d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "t_d", "double",
        std::vector<size_t>{static_cast<size_t>(n_drivers)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> t_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_drivers,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> t_d_flat__;
        current_statement__ = 1;
        t_d_flat__ = context__.vals_r("t_d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_drivers; ++sym1__) {
          stan::model::assign(t_d, t_d_flat__[(pos__ - 1)],
            "assigning variable t_d", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(t_d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"t_d"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"n", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_drivers)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n_races)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_drivers; ++sym1__) {
      param_names__.emplace_back(std::string() + "t_d" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "n");
      for (int sym1__ = 1; sym1__ <= n_races; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_drivers; ++sym1__) {
      param_names__.emplace_back(std::string() + "t_d" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "n");
      for (int sym1__ = 1; sym1__ <= n_races; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"t_d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_drivers) + "},\"block\":\"parameters\"},{\"name\":\"n\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_races) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"t_d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_drivers) + "},\"block\":\"parameters\"},{\"name\":\"n\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_races) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_drivers;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((1 +
      n_races));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_drivers;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((1 +
      n_races));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model3_model_namespace::model3_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model3_model_namespace::profiles__;
}
#endif